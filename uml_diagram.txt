class Problem
  private int id;
  private Solver solver;
  private std::string output_method;
  private T solution;
  
  public void solve();

class ODE_Problem(Problem)
  private double init_y;
  private double init_t;
  private double delta_t;
  private int n;
  private double* function;

  private double[] solution;
  public ODE_Problem(double init_y, double init_t, double delta_t, int n, double* function)
  public void solve();

class Solver
  public double elapsed_time;
  public virtual T solve();

class DiscreteSolver(Solver)
  public virtual double[] solve();

class ForwardEuler(DiscreteSolver)
  public virtual double[] solve();

class AdamBashforth(DiscreteSolver)
  public virtual double[] solve();

class BackwardEuler(DiscreteSolver)
  public virtual double[] solve();

class Runge-Kutta(DiscreteSolver)
  public virtual double[] solve();

class Reader
  public virtual Problem read_problem();
  public double* read_function();
  private double* parse_function(std::string function);

class ODE_Reader(Reader)
  public virtual ODE_Problem read_problem();

class Function(std::function)
  public generateFunction(std::string  function_expression);

class Block
  protected std::string variable_name;

class PolynomialBlock(Block)
  protected std::string variable_name;
  private double scalar;

class LogBlock(Block)
  protected std::string variable_name;

class ExpBlock(Block)
  protected std::string variable_name;
class Output
  public Output(Problem& problem, std::string path);
  protected Problem& problem;
  protected std::string path;

  public virtual void output();

class ShellOutput(Output)
 public ShellOutput(Problem& problem);
 public virtual void output();

class FileOutput(Output) 
  public FileOutput(Problem& problem, std::string path);
  public virtual void output();

class PlotOutput(Output)
  public PlotOutput(Problem& problem, std::string path);
  public virtual void output();
