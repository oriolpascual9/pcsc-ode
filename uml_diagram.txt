class Problem
  private int id;
  private Solver solver;
  private std::string output_method;
  private double* function;
  
  public void setSolver(double init_y, double init_t, double delta_t, int n, std::string method);
  public void setFunction(double* function);
  public double[] solve();
  public std::string getOutputMethod();

class Solver
  private double init_y;
  private double init_t;
  private double delta_t;
  private int n;
  private double[] y_steps;
  public virtual double[] solve();

class ForwardEuler(Solver)
  public virtual double[] solve();

class AdamBashforth(Solver)
  public virtual double[] solve();

class BackwardEuler(Solver)
  public virtual double[] solve();

class Runge-Kutta(Solver)
  public virtual double[] solve();

class Input
  public Problem read_variables();
  public double* read_function();

class FunctionParser
  public double* parse_function(std::string function);

class Output
  public Output(Problem& problem, std::string path);
  protected Problem& problem;
  protected std::string path;

  public virtual void output();

class ShellOutput(Output)
 public ShellOutput(Problem& problem);
 public virtual void output();

class FileOutput(Output) 
  public FileOutput(Problem& problem, std::string path);
  public virtual void output();

class PlotOutput(Output)
  public PlotOutput(Problem& problem, std::string path);
  public virtual void output();
